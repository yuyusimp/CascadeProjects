{"ast":null,"code":"import { Feature } from '../motion/features/Feature.mjs';\nimport { press } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { frame } from '../frameloop/frame.mjs';\nfunction handlePressEvent(node, event, lifecycle) {\n  const {\n    props\n  } = node;\n  if (node.animationState && props.whileTap) {\n    node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n  }\n  const eventName = \"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle);\n  const callback = props[eventName];\n  if (callback) {\n    frame.postRender(() => callback(event, extractEventInfo(event)));\n  }\n}\nclass PressGesture extends Feature {\n  mount() {\n    const {\n      current\n    } = this.node;\n    if (!current) return;\n    this.unmount = press(current, startEvent => {\n      handlePressEvent(this.node, startEvent, \"Start\");\n      return (endEvent, {\n        success\n      }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n    }, {\n      useGlobalTarget: this.node.props.globalTapTarget\n    });\n  }\n  unmount() {}\n}\nexport { PressGesture };","map":{"version":3,"names":["Feature","press","extractEventInfo","frame","handlePressEvent","node","event","lifecycle","props","animationState","whileTap","setActive","eventName","callback","postRender","PressGesture","mount","current","unmount","startEvent","endEvent","success","useGlobalTarget","globalTapTarget"],"sources":["c:/Users/Yan/CascadeProjects/digital-bifold-brochure/node_modules/framer-motion/dist/es/gestures/press.mjs"],"sourcesContent":["import { Feature } from '../motion/features/Feature.mjs';\nimport { press } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,gCAAgC;AACxD,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,KAAK,QAAQ,wBAAwB;AAE9C,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,KAAK,EAAEC,SAAS,EAAE;EAC9C,MAAM;IAAEC;EAAM,CAAC,GAAGH,IAAI;EACtB,IAAIA,IAAI,CAACI,cAAc,IAAID,KAAK,CAACE,QAAQ,EAAE;IACvCL,IAAI,CAACI,cAAc,CAACE,SAAS,CAAC,UAAU,EAAEJ,SAAS,KAAK,OAAO,CAAC;EACpE;EACA,MAAMK,SAAS,GAAI,OAAO,IAAIL,SAAS,KAAK,KAAK,GAAG,EAAE,GAAGA,SAAS,CAAE;EACpE,MAAMM,QAAQ,GAAGL,KAAK,CAACI,SAAS,CAAC;EACjC,IAAIC,QAAQ,EAAE;IACVV,KAAK,CAACW,UAAU,CAAC,MAAMD,QAAQ,CAACP,KAAK,EAAEJ,gBAAgB,CAACI,KAAK,CAAC,CAAC,CAAC;EACpE;AACJ;AACA,MAAMS,YAAY,SAASf,OAAO,CAAC;EAC/BgB,KAAKA,CAAA,EAAG;IACJ,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACZ,IAAI;IAC7B,IAAI,CAACY,OAAO,EACR;IACJ,IAAI,CAACC,OAAO,GAAGjB,KAAK,CAACgB,OAAO,EAAGE,UAAU,IAAK;MAC1Cf,gBAAgB,CAAC,IAAI,CAACC,IAAI,EAAEc,UAAU,EAAE,OAAO,CAAC;MAChD,OAAO,CAACC,QAAQ,EAAE;QAAEC;MAAQ,CAAC,KAAKjB,gBAAgB,CAAC,IAAI,CAACC,IAAI,EAAEe,QAAQ,EAAEC,OAAO,GAAG,KAAK,GAAG,QAAQ,CAAC;IACvG,CAAC,EAAE;MAAEC,eAAe,EAAE,IAAI,CAACjB,IAAI,CAACG,KAAK,CAACe;IAAgB,CAAC,CAAC;EAC5D;EACAL,OAAOA,CAAA,EAAG,CAAE;AAChB;AAEA,SAASH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}